/**
 * Copy text to clipboard
 * @param {string} text - Text to copy
 * @returns {Promise<boolean>} Success status
 */
export async function copyToClipboard(text) {
  try {
    if (navigator.clipboard && navigator.clipboard.writeText) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback for older browsers
      const textarea = document.createElement('textarea');
      textarea.value = text;
      textarea.style.position = 'fixed';
      textarea.style.opacity = '0';
      document.body.appendChild(textarea);
      textarea.select();
      const success = document.execCommand('copy');
      document.body.removeChild(textarea);
      return success;
    }
  } catch (error) {
    console.error('Error copying to clipboard:', error);
    return false;
  }
}

/**
 * Export text as a downloadable file
 * @param {string} content - Content to export
 * @param {string} filename - Name of the file
 * @param {string} mimeType - MIME type of the file
 */
function downloadFile(content, filename, mimeType) {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Export cover letter as plain text file
 * @param {string} coverLetter - Cover letter content
 * @param {string} filename - Optional filename
 * @returns {Promise<boolean>} Success status
 */
export async function exportToText(coverLetter, filename = 'cover-letter.txt') {
  try {
    downloadFile(coverLetter, filename, 'text/plain');
    return true;
  } catch (error) {
    console.error('Error exporting to text:', error);
    return false;
  }
}

/**
 * Export cover letter as PDF (simplified version - creates a formatted text file)
 * Note: True PDF generation would require a library like jsPDF
 * @param {string} coverLetter - Cover letter content
 * @param {string} filename - Optional filename
 * @returns {Promise<boolean>} Success status
 */
export async function exportToPDF(coverLetter, filename = 'cover-letter.pdf') {
  try {
    // For a basic implementation, we'll create a formatted text file
    // In a production app, you'd want to use jsPDF or similar
    const formattedContent = formatCoverLetterForExport(coverLetter);
    downloadFile(formattedContent, filename.replace('.pdf', '.txt'), 'text/plain');
    return true;
  } catch (error) {
    console.error('Error exporting to PDF:', error);
    return false;
  }
}

/**
 * Export cover letter as Word document (DOCX format)
 * Note: This creates a simple RTF file that Word can open
 * @param {string} coverLetter - Cover letter content
 * @param {string} filename - Optional filename
 * @returns {Promise<boolean>} Success status
 */
export async function exportToWord(coverLetter, filename = 'cover-letter.doc') {
  try {
    // Create a simple RTF document that Word can open
    const rtfContent = convertToRTF(coverLetter);
    downloadFile(rtfContent, filename, 'application/rtf');
    return true;
  } catch (error) {
    console.error('Error exporting to Word:', error);
    return false;
  }
}

/**
 * Format cover letter for export
 * @param {string} coverLetter - Cover letter content
 * @returns {string} Formatted content
 */
function formatCoverLetterForExport(coverLetter) {
  const date = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return `${date}\n\n${coverLetter}\n\n---\nGenerated by Resume Tailor Extension`;
}

/**
 * Convert text to RTF format
 * @param {string} text - Plain text content
 * @returns {string} RTF formatted content
 */
function convertToRTF(text) {
  // Basic RTF template
  const rtfHeader = '{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}';
  const rtfBody = text
    .split('\n')
    .map(line => line.trim())
    .filter(line => line.length > 0)
    .map(line => `\\par ${escapeRTF(line)}`)
    .join('\n');
  const rtfFooter = '}';

  return `${rtfHeader}\n\\f0\\fs24\n${rtfBody}\n${rtfFooter}`;
}

/**
 * Escape special characters for RTF
 * @param {string} text - Text to escape
 * @returns {string} Escaped text
 */
function escapeRTF(text) {
  return text
    .replace(/\\/g, '\\\\')
    .replace(/{/g, '\\{')
    .replace(/}/g, '\\}');
}

/**
 * Export cover letter as HTML file
 * @param {string} coverLetter - Cover letter content
 * @param {string} filename - Optional filename
 * @returns {Promise<boolean>} Success status
 */
export async function exportToHTML(coverLetter, filename = 'cover-letter.html') {
  try {
    const htmlContent = convertToHTML(coverLetter);
    downloadFile(htmlContent, filename, 'text/html');
    return true;
  } catch (error) {
    console.error('Error exporting to HTML:', error);
    return false;
  }
}

/**
 * Convert text to HTML format
 * @param {string} text - Plain text content
 * @returns {string} HTML formatted content
 */
function convertToHTML(text) {
  const date = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const paragraphs = text
    .split('\n\n')
    .map(para => `<p>${para.replace(/\n/g, '<br>')}</p>`)
    .join('\n');

  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cover Letter</title>
  <style>
    body {
      font-family: 'Times New Roman', Times, serif;
      max-width: 800px;
      margin: 40px auto;
      padding: 20px;
      line-height: 1.6;
      color: #333;
    }
    .date {
      margin-bottom: 20px;
      color: #666;
    }
    p {
      margin-bottom: 15px;
      text-align: justify;
    }
    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #ddd;
      font-size: 12px;
      color: #999;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="date">${date}</div>
  ${paragraphs}
  <div class="footer">Generated by Resume Tailor Extension</div>
</body>
</html>`;
}

/**
 * Share cover letter via email
 * @param {string} coverLetter - Cover letter content
 * @param {string} subject - Email subject
 */
export function shareViaEmail(coverLetter, subject = 'Cover Letter') {
  const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(coverLetter)}`;
  window.open(mailtoLink);
}

/**
 * Print cover letter
 * @param {string} coverLetter - Cover letter content
 */
export function printCoverLetter(coverLetter) {
  const printWindow = window.open('', '_blank');
  const htmlContent = convertToHTML(coverLetter);
  printWindow.document.write(htmlContent);
  printWindow.document.close();
  printWindow.focus();
  setTimeout(() => {
    printWindow.print();
    printWindow.close();
  }, 250);
}

/**
 * Get file extension from filename
 * @param {string} filename - Filename
 * @returns {string} File extension
 */
export function getFileExtension(filename) {
  return filename.split('.').pop().toLowerCase();
}

/**
 * Validate filename
 * @param {string} filename - Filename to validate
 * @returns {boolean} Whether filename is valid
 */
export function isValidFilename(filename) {
  const invalidChars = /[<>:"/\\|?*]/g;
  return !invalidChars.test(filename) && filename.length > 0 && filename.length < 255;
}

export default {
  copyToClipboard,
  exportToText,
  exportToPDF,
  exportToWord,
  exportToHTML,
  shareViaEmail,
  printCoverLetter,
  getFileExtension,
  isValidFilename
};
